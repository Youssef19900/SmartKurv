import Foundation

final class CatalogService {
    static let shared = CatalogService()
    private var products: [Product] = []
    private var eanMap: [String: String] = [:]

    private init() {
        loadCatalog()
        loadEANMap()
        mergeEANs()
    }

    // MARK: - Public API

    func search(_ query: String) -> [Product] {
        let q = query.lowercased().trimmingCharacters(in: .whitespacesAndNewlines)
        guard !q.isEmpty else { return [] }
        return products.filter { $0.name.lowercased().contains(q) }
    }

    func all() -> [Product] { products }

    func ean(for product: Product, variant: ProductVariant) -> String? {
        eanMap[variant.key(productId: product.id)]
    }

    // MARK: - Private helpers

    private func loadCatalog() {
        if let url = Bundle.main.url(forResource: "catalog", withExtension: "json"),
           let data = try? Data(contentsOf: url),
           let decoded = try? JSONDecoder().decode([Product].self, from: data) {
            products = decoded
        } else {
            print("⚠️ catalog.json ikke fundet – bruger fallback.")
            products = fallbackProducts()
        }
    }

    private func loadEANMap() {
        if let url = Bundle.main.url(forResource: "ean-map", withExtension: "json"),
           let data = try? Data(contentsOf: url),
           let decoded = try? JSONDecoder().decode([String: String].self, from: data) {
            eanMap = decoded
        } else {
            print("ℹ️ ean-map.json ikke fundet – bruger kun fallback EAN’er (hvis nogen).")
        }
    }

    /// Tilføjer EAN fra eanMap til produkter
    private func mergeEANs() {
        for i in 0..<products.count {
            var prod = products[i]
            prod.variants = prod.variants.map { variant in
                var copy = variant
                if let ean = eanMap[variant.key(productId: prod.id)] {
                    // Opdaterer med fundet EAN
                    copy = ProductVariant(unit: variant.unit,
                                          organic: variant.organic,
                                          ean: ean)
                }
                return copy
            }
            products[i] = prod
        }
    }

    // MARK: - Fallback-produkter (bruges kun hvis json mangler)
    private func fallbackProducts() -> [Product] {
        return [
            Product(
                id: "banana",
                name: "Banan",
                variants: [
                    ProductVariant(unit: "stk", organic: false, ean: "5701234567890"),
                    ProductVariant(unit: "bundt", organic: false, ean: "5701234567891"),
                    ProductVariant(unit: "stk", organic: true, ean: "5701234567892"),
                    ProductVariant(unit: "bundt", organic: true, ean: "5701234567893")
                ]
            ),
            Product(
                id: "milk-1l",
                name: "Mælk Let 1L",
                variants: [
                    ProductVariant(unit: "ltr", organic: false, ean: "5701170212345"),
                    ProductVariant(unit: "ltr", organic: true, ean: "5701170212346")
                ]
            )
        ]
    }
}
