workflows:
  ios_release:
    name: SmartKurv iOS (TestFlight)
    environment:
      xcode: latest
      groups:
        - smartkurv
      vars:
        APP_BUNDLE_ID: com.youssef19900.SmartKurv
        TEAM_ID: GUYJ52Y55V
        APPLE_APP_ID: "6753662256"

    scripts:
      - name: Install tools
        script: |
          set -euxo pipefail
          brew install xcodegen
          pip3 install --upgrade codemagic-cli-tools

      - name: Regenerate project (fresh)
        script: |
          set -euxo pipefail
          rm -rf SmartKurv.xcodeproj
          xcodegen generate --spec project.yml

      - name: Verify AppIcon presence
        script: |
          set -euxo pipefail
          echo "== Checking for Assets.xcassets/AppIcon.appiconset =="
          APPICON_DIR="Assets.xcassets/AppIcon.appiconset"
          test -d "$APPICON_DIR"
          ls -la "$APPICON_DIR"
          for f in AppIcon-60@2x.png AppIcon-60@3x.png AppIcon-1024.png; do
            if [ ! -f "$APPICON_DIR/$f" ]; then
              echo "❌ Missing $f in AppIcon.appiconset"
              exit 1
            fi
          done
          echo "✅ AppIcon files found"

      # ⬅️ Flyttet op: skriv korrekt Contents.json FØR validering
      - name: Normalize Contents.json to AppIcon-* filenames
        script: |
          set -euxo pipefail
          APPICON_DIR="Assets.xcassets/AppIcon.appiconset"
          mkdir -p "$APPICON_DIR"
          cat > "$APPICON_DIR/Contents.json" <<'JSON'
          {
            "images": [
              { "size": "20x20",   "idiom": "iphone",        "filename": "AppIcon-20@2x.png",  "scale": "2x" },
              { "size": "20x20",   "idiom": "iphone",        "filename": "AppIcon-20@3x.png",  "scale": "3x" },
              { "size": "29x29",   "idiom": "iphone",        "filename": "AppIcon-29@2x.png",  "scale": "2x" },
              { "size": "29x29",   "idiom": "iphone",        "filename": "AppIcon-29@3x.png",  "scale": "3x" },
              { "size": "40x40",   "idiom": "iphone",        "filename": "AppIcon-40@2x.png",  "scale": "2x" },
              { "size": "40x40",   "idiom": "iphone",        "filename": "AppIcon-40@3x.png",  "scale": "3x" },
              { "size": "60x60",   "idiom": "iphone",        "filename": "AppIcon-60@2x.png",  "scale": "2x" },
              { "size": "60x60",   "idiom": "iphone",        "filename": "AppIcon-60@3x.png",  "scale": "3x" },
              { "size": "1024x1024","idiom": "ios-marketing","filename": "AppIcon-1024.png",   "scale": "1x" }
            ],
            "info": { "version": 1, "author": "xcode" }
          }
          JSON
          echo "✅ Contents.json normalized to AppIcon-*"

      # ✔️ Nu validerer vi at JSON'en matcher faktiske filer (ingen navn-mismatch mere)
      - name: Validate Contents.json filenames
        script: |
          set -euxo pipefail
          APPICON_DIR="Assets.xcassets/AppIcon.appiconset"
          JSON="$APPICON_DIR/Contents.json"
          test -s "$JSON"
          python3 - <<'PY'
          import json, os, sys
          base = "Assets.xcassets/AppIcon.appiconset"
          with open(os.path.join(base, "Contents.json")) as f:
              d = json.load(f)
          missing = []
          has_120 = False
          for img in d.get("images", []):
              fn   = img.get("filename")
              size = img.get("size")
              idiom= img.get("idiom")
              scale= img.get("scale")
              if fn and not os.path.exists(os.path.join(base, fn)):
                  missing.append(fn)
              if idiom == "iphone" and size == "60x60" and scale == "2x" and fn:
                  has_120 = True
          if missing:
              print("❌ Missing files referenced in Contents.json:", ", ".join(missing))
              sys.exit(1)
          if not has_120:
              print("❌ Contents.json does not reference a 60x60 @2x (120x120) iPhone icon")
              sys.exit(1)
          print("✅ Contents.json filenames OK and includes 60x60 @2x entry")
          PY

      - name: Bump version & build + ensure CFBundleIconName
        script: |
          set -euxo pipefail
          PLIST="Info.plist"
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString 1.1" "$PLIST" || \
            /usr/libexec/PlistBuddy -c "Add :CFBundleShortVersionString string 1.1" "$PLIST"
          BUILD_NUM="$(date +%Y%m%d%H%M)"
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${BUILD_NUM}" "$PLIST" || \
            /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string ${BUILD_NUM}" "$PLIST"
          /usr/libexec/PlistBuddy -c "Set :CFBundleIconName AppIcon" "$PLIST" || \
            /usr/libexec/PlistBuddy -c "Add :CFBundleIconName string AppIcon" "$PLIST"
          echo "== Local plist =="
          /usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Print :CFBundleIconName" "$PLIST" || true

      - name: Import .p12 certificate
        script: |
          set -euxo pipefail
          keychain initialize
          echo "$P12_BASE64" | base64 --decode > "$CM_BUILD_DIR/AppleDistribution.p12"
          keychain add-certificates --certificate "$CM_BUILD_DIR/AppleDistribution.p12" --certificate-password "$P12_PASSWORD"
          security find-identity -p codesigning -v || true

      - name: Restore provisioning profile (to standard folder)
        script: |
          set -euxo pipefail
          STD_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$STD_DIR"
          PROFILE_STD="$STD_DIR/SmartKurv_AppStore.mobileprovision"
          echo "$PROFILE_BASE64" | base64 --decode > "$PROFILE_STD"
          test -s "$PROFILE_STD"
          echo "== Installed profiles =="
          ls -la "$STD_DIR" || true

      - name: Configure signing in Xcode project
        script: |
          set -euxo pipefail
          PBX="SmartKurv.xcodeproj/project.pbxproj"
          sed -i '' -e 's/Apple Distribution: [^"]*/Apple Distribution/g' "$PBX" || true
          sed -i '' -e 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' "$PBX" || true
          sed -i '' -e 's/PROVISIONING_PROFILE_SPECIFIER = "[^"]*";/PROVISIONING_PROFILE_SPECIFIER = "";/g' "$PBX" || true
          sed -i '' -e 's/PROVISIONING_PROFILE = "[^"]*";/PROVISIONING_PROFILE = "";/g' "$PBX" || true
          xcode-project use-profiles --project SmartKurv.xcodeproj
          echo "== Build settings =="
          xcodebuild -project SmartKurv.xcodeproj -scheme SmartKurv -showBuildSettings | \
            grep -E 'CODE_SIGN_STYLE|DEVELOPMENT_TEAM|PRODUCT_BUNDLE_IDENTIFIER|CODE_SIGN_IDENTITY|PROVISIONING_PROFILE_SPECIFIER' || true

      - name: Build archive (codesigned)
        script: |
          set -euxo pipefail
          xcodebuild \
            -project SmartKurv.xcodeproj \
            -scheme SmartKurv \
            -configuration Release \
            -archivePath "$CM_BUILD_DIR/SmartKurv.xcarchive" \
            -sdk iphoneos \
            -allowProvisioningUpdates \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$APP_BUNDLE_ID" \
            ASSETCATALOG_COMPILER_APPICON_NAME=AppIcon \
            ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS=YES \
            GENERATE_INFOPLIST_FILE=NO \
            archive

      - name: Verify plist & icons inside archive
        script: |
          set -euxo pipefail
          APP_DIR="$CM_BUILD_DIR/SmartKurv.xcarchive/Products/Applications/SmartKurv.app"
          APP_PLIST="$APP_DIR/Info.plist"
          echo "== Archive plist =="
          /usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$APP_PLIST" || true
          /usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$APP_PLIST" || true
          /usr/libexec/PlistBuddy -c "Print :CFBundleIconName" "$APP_PLIST" >/dev/null 2>&1 || { echo "❌ Missing CFBundleIconName in archive!"; exit 1; }
          echo "✅ CFBundleIconName is present in archive"
          echo "== Check Assets.car present =="
          test -f "$APP_DIR/Assets.car" || { echo "❌ Assets.car missing, asset catalog not compiled into app"; exit 1; }
          echo "✅ Assets.car present"

      - name: Detect profile name & Write exportOptions.plist
        script: |
          set -euxo pipefail
          PROFILE_STD="$HOME/Library/MobileDevice/Provisioning Profiles/SmartKurv_AppStore.mobileprovision"
          PROFILE_PLIST="$CM_BUILD_DIR/profile.plist"
          /usr/bin/security cms -D -i "$PROFILE_STD" > "$PROFILE_PLIST"
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' "$PROFILE_PLIST")
          echo "Bruger provisioning profile: NAME='$PROFILE_NAME'"

          cat > "$CM_BUILD_DIR/exportOptions.plist" << PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>teamID</key><string>$TEAM_ID</string>
            <key>signingStyle</key><string>manual</string>
            <key>signingCertificate</key><string>Apple Distribution</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>$APP_BUNDLE_ID</key>
              <string>$PROFILE_NAME</string>
            </dict>
            <key>uploadSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>destination</key><string>export</string>
          </dict>
          </plist>
          PLIST

      - name: Export .ipa
        script: |
          set -euxo pipefail
          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/SmartKurv.xcarchive" \
            -exportOptionsPlist "$CM_BUILD_DIR/exportOptions.plist" \
            -exportPath "$CM_BUILD_DIR/exported"

      - name: Upload to TestFlight
        script: |
          set -euxo pipefail
          IPA="$CM_BUILD_DIR/exported/SmartKurv.ipa"
          test -s "$IPA" || { echo "❌ IPA not found at $IPA"; exit 1; }
          echo "APPLE_APP_ID=$APPLE_APP_ID"
          echo "APP_STORE_CONNECT_ISSUER_ID=${APP_STORE_CONNECT_ISSUER_ID:0:6}..."
          echo "APP_STORE_CONNECT_KEY_IDENTIFIER=${APP_STORE_CONNECT_KEY_IDENTIFIER:-<missing>}"
          if [ -z "${APP_STORE_CONNECT_PRIVATE_KEY:-}" ]; then
            echo "❌ Missing APP_STORE_CONNECT_PRIVATE_KEY"
            exit 1
          fi
          app-store-connect publish \
            --apple-id "$APPLE_APP_ID" \
            --path "$IPA" \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --private-key "$APP_STORE_CONNECT_PRIVATE_KEY"

    artifacts:
      - "$CM_BUILD_DIR/exported/*.ipa"
